{"version":3,"sources":["src/emails-input.js","src/index.js"],"names":["EmailsInput","onChangeEvent","document","createEvent","initEvent","isEmailValid","email","test","EMAIL_STATUSES","VALID","INVALID","areGlobalHandlersAttached","getInput","input","createElement","className","setAttribute","onblur","handleBlur","isEmailsInput","element","indexOf","getEmailObj","value","status","id","Date","now","handleInputValue","trim","replace","container","parentElement","render","handleKeyPress","event","target","charCode","preventDefault","handlePaste","paste","clipboardData","window","getData","pastedEmails","split","map","val","initContainer","root","state","emails","addEventListener","emailId","getAttribute","filter","removeChild","appendChild","newEmails","concat","dispatchEvent","forEach","emailContainer","innerHTML","insertBefore","getElementsByClassName","options","onChange","replaceAll","getState","addEmails","emailsInput","getElementById","getRandomInt","Math","floor","random","validCount","reduce","count","alert"],"mappings":"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","file":"src.a8aec7bf.js","sourceRoot":"..","sourcesContent":["import './emails-input.scss';\n\n// useing the CustomEvent constructor is not working in IE11. We could polyfill it\nconst onChangeEvent = document.createEvent('CustomEvent');\nonChangeEvent.initEvent('emailsInput.change', true, false);\n\nconst isEmailValid = (email) => {\n  return /^(\\s?[^\\s,]+@[^\\s,]+\\.[^\\s,]+\\s?,)*(\\s?[^\\s,]+@[^\\s,]+\\.[^\\s,]+)$/.test(\n    email\n  );\n};\n\nexport const EMAIL_STATUSES = {\n  VALID: 'valid',\n  INVALID: 'invalid',\n};\n\nlet areGlobalHandlersAttached = false;\n\nconst getInput = () => {\n  const input = document.createElement('input');\n  input.className = 'emails-input__input';\n  input.setAttribute('type', 'text');\n  input.setAttribute('placeholder', 'add more people...');\n  input.onblur = handleBlur;\n  return input;\n};\n\nconst isEmailsInput = (element) =>\n  element.className.indexOf('emails-input__input') > -1;\n\nconst getEmailObj = (value) => {\n  // I tend to use strings over boolean because it's easier to extend later.\n  // for instance if we want to later keep track of duplicated emails and style them differently\n  const status = isEmailValid(value)\n    ? EMAIL_STATUSES.VALID\n    : EMAIL_STATUSES.INVALID;\n  return { value, status, id: Date.now() };\n};\n\nconst handleInputValue = (input) => {\n  if (!input.value.trim().replace(/,/g, '')) {\n    return;\n  }\n\n  const container = input.parentElement;\n  render(container, [getEmailObj(input.value)]);\n  input.value = '';\n};\n\nconst handleKeyPress = (event) => {\n  const input = event.target;\n  if (\n    isEmailsInput(input) &&\n    (event.charCode === 44 || event.charCode === 13)\n  ) {\n    event.preventDefault();\n\n    handleInputValue(input);\n  }\n};\n\nconst handleBlur = (event) => {\n  const input = event.target;\n  if (isEmailsInput(input)) {\n    handleInputValue(input);\n  }\n};\n\nconst handlePaste = (event) => {\n  const input = event.target;\n  if (isEmailsInput(input)) {\n    const container = input.parentElement;\n    let paste = (event.clipboardData || window.clipboardData).getData('text');\n    if (paste) {\n      event.preventDefault();\n      const pastedEmails = paste\n        .split(',')\n        .map((val) => getEmailObj(val.trim()));\n      render(container, pastedEmails);\n    }\n  }\n};\n\nconst initContainer = (root) => {\n  const container = document.createElement('div');\n  container.className = 'emails-input';\n  container.state = { emails: [] };\n  container.addEventListener('click', ({ target }) => {\n    if (target.className.indexOf('emails-input__remove-tag') > -1) {\n      const emailId = target.getAttribute('data-email-id');\n      container.state.emails = container.state.emails.filter(\n        ({ id }) => emailId != id\n      );\n      // normally you would do target.parentElement.remove but it doesn't work in IE.\n      target.parentElement.parentElement.removeChild(target.parentElement);\n    }\n  });\n  const input = getInput();\n  container.appendChild(input);\n  root.appendChild(container);\n  return container;\n};\n\nconst render = (container, newEmails) => {\n  container.state.emails = container.state.emails.concat(newEmails);\n  container.dispatchEvent(onChangeEvent);\n  newEmails.forEach((email) => {\n    const emailContainer = document.createElement('div');\n    emailContainer.className = `emails-input__tag emails-input__tag--${email.status}`;\n    emailContainer.innerHTML = `\n      <span class=\"emails-input__email\">${email.value}</span>\n      <button class=\"emails-input__remove-tag\" data-email-id=\"${email.id}\" aria-label=\"remove ${email.value}\">\n        <svg width=\"8\" height=\"8\" viewBox=\"0 0 8 8\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\n          <path fill-rule=\"evenodd\" clip-rule=\"evenodd\" d=\"M8 0.8L7.2 0L4 3.2L0.8 0L0 0.8L3.2 4L0 7.2L0.8 8L4 4.8L7.2 8L8 7.2L4.8 4L8 0.8Z\" fill=\"#050038\"/>\n        </svg>\n      </span>\n    `;\n    container.insertBefore(\n      emailContainer,\n      container.getElementsByClassName('emails-input__input')[0]\n    );\n  });\n};\n\nfunction EmailsInput(root, options = {}) {\n  const container = initContainer(root);\n  if (options.onChange) {\n    container.addEventListener('emailsInput.change', (event) => {\n      options.onChange(event, container.state.emails);\n    });\n  }\n\n  if (!areGlobalHandlersAttached) {\n    document.addEventListener('keypress', handleKeyPress);\n    document.addEventListener('blur', handleBlur);\n    document.addEventListener('paste', handlePaste);\n    areGlobalHandlersAttached = true;\n  }\n\n  return {\n    replaceAll: (emails = []) => {\n      // Maybe put emails in their own container ? ðŸ¤”\n      container.state.emails = [];\n      const input = container.getElementsByClassName('emails-input__input')[0];\n      container.innerHTML = '';\n      container.appendChild(input);\n      emails = emails.map(getEmailObj);\n      render(container, emails);\n    },\n    getState: () => container.state.emails,\n    addEmails: (emails) => {\n      render(container, emails.map(getEmailObj));\n    },\n  };\n}\n\nexport default EmailsInput;\n","import './styles.scss';\n\nimport EmailsInput, { EMAIL_STATUSES } from './emails-input';\nconst emailsInput = EmailsInput(document.getElementById('emails'));\n\ndocument.getElementById('btnAddEmail').addEventListener('click', () => {\n  function getRandomInt() {\n    return Math.floor(Math.random() * Math.floor(999));\n  }\n  emailsInput.addEmails([`ran${getRandomInt()}@dom.com`]);\n});\n\ndocument.getElementById('btnEmailCount').addEventListener('click', () => {\n  const emails = emailsInput.getState();\n  const validCount = emails.reduce((count, email) => {\n    if (email.status === EMAIL_STATUSES.VALID) {\n      count++;\n    }\n    return count;\n  }, 0);\n  window.alert(`The number of valid emails is: ${validCount}`);\n});\n"]}